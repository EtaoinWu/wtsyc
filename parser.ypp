%language "c++"
%require  "3.3"
/* %debug  */
%defines 

%define api.namespace {SysY}
%define api.parser.class {Parser}
%define api.value.type variant
%define api.token.constructor

%code requires{
   #include <iostream>
   #include <cstdlib>
   #include <string>
   #include <fstream>
   #include <memory>
   #include "semantics.hpp"
   #include "location.hpp"
   
   namespace SysY {
      class Driver;
      void insert_declaration(Driver &,AST::pointer<AST::CompileTimeDeclaration>);
      void insert_function(Driver &, AST::pointer<AST::Function>);
   }
#ifndef YY_NULLPTR
# if defined __cplusplus && 201103L <= __cplusplus
#  define YY_NULLPTR nullptr
# else
#  define YY_NULLPTR 0
# endif
#endif
}

%param { SysY::Driver  &driver  }


%define parse.assert
%printer { yyo << ($$)->toJSON(); } 
   /* <AST::pointer<AST::Node>> */
   <AST::pointer<AST::Expression>>
   <AST::pointer<AST::PotentialLiteral>>
   <AST::pointer<AST::ParamDeclaration>>
   <AST::pointer<AST::VariableDeclaration>>
   <AST::pointer<AST::ConstDeclaration>>
   <AST::pointer<AST::ArrayLiteral>>
   <AST::pointer<AST::Identifier>>
   <AST::pointer<AST::LeftValueExpression>>
   <AST::pointer<AST::FuncParams>>
   <AST::pointer<AST::OffsetList>>
   <AST::pointer<AST::Block>>
   <AST::pointer<AST::Function>>
   /* <AST::pointer<AST::BlockItem>> */
   <AST::pointer<AST::Statement>>
   ;
%printer { yyo << AST::toJSON($$); } 
   /* <AST::pointer<AST::Node>> */
   <AST::container<AST::pointer<AST::ParamDeclaration>>>
   <AST::container<AST::pointer<AST::VariableDeclaration>>>
   <AST::container<AST::pointer<AST::ConstDeclaration>>>
   <AST::container<AST::pointer<AST::CompileTimeDeclaration>>>
   ;
%printer { yyo << $$; } <*>;

%locations
%define api.location.type {SysY::Range}


%code{
   /* include for all driver functions */
   namespace SysY {
      Parser::symbol_type yylex(SysY::Driver &driver);
   }
}

%define api.token.prefix {TOKEN_}

%token                         EOF 0
%token                         LBRACKET "["
%token                         RBRACKET "]"
%token                         LPAREN "("
%token                         RPAREN ")"
%token                         LCURLY "{"
%token                         RCURLY "}"
%token                         COMMA ","
%token                         PERIOD "."
%token                         SEMICOLON ";"
%token                         ASSIGN "="
%token                         PLUS "+"
%token                         MINUS "-"
%token                         STAR "*"
%token                         SLASH "/"
%token                         MOD "%"
%token                         GT ">"
%token                         GE ">="
%token                         LT "<"
%token                         LE "<="
%token                         EQ "=="
%token                         NEQ "!="
%token                         LOGICAL_NOT "!"
%token                         LOGICAL_AND "&&"
%token                         LOGICAL_OR "||"
%token                         IF "if"
%token                         ELSE "else"
%token                         WHILE "while"
%token                         BREAK "break"
%token                         CONTINUE "continue"
%token                         RETURN "return"
%token                         CONST "const"
%token <int>                   INT_LITERAL
%token <SysY::PrimitiveType>   TYPE
%token <std::string>           IDENT

/* to solve dangling else */
%nonassoc RPAREN
%nonassoc ELSE

%%
%start result;
result: comp_unit;

comp_unit: /* epsilon */
   | comp_unit declaration 
   {
      for (auto &ptr : $2) {
         insert_declaration(driver, std::move(ptr));
      }
   }
   | comp_unit function_definition
   {
      insert_function(driver, std::move($2));
   }


%nterm <AST::pointer<AST::ParamDeclaration>> function_param;
function_param:
   TYPE IDENT offset_list { $$ = std::make_shared<AST::ParamDeclaration>($2, std::move(*$3), std::make_shared<AST::NoneLiteral>()); $$->range = @$; }

%nterm <AST::container<AST::pointer<AST::ParamDeclaration>>> function_params;
function_params:
   function_param { $$ = AST::container<AST::pointer<AST::ParamDeclaration>>(); $$.emplace_back(move($1)); }
   | function_params "," function_param { $$ = std::move($1); $$.emplace_back(move($3)); }

%nterm <AST::pointer<AST::Function>> function_definition;
function_definition:
   TYPE IDENT "(" ")" "{" block "}" { $$ = std::make_shared<AST::Function>($1, $2, move($6)); $$->range = @$; }
   | TYPE IDENT "(" function_params ")" "{" block "}" { $$ = std::make_shared<AST::Function>($1, $2, std::move($4), move($7)); $$->range = @$; }

////////////////////////////////////////////////////////////////
/// Declarations ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////

%nterm <AST::container<AST::pointer<AST::CompileTimeDeclaration>>> declaration;
declaration:
   const_declaration { std::move($1.begin(), $1.end(), std::back_inserter($$)); }
   | var_declaration { std::move($1.begin(), $1.end(), std::back_inserter($$)); }

%nterm <AST::container<AST::pointer<AST::ConstDeclaration>>> const_declaration;
const_declaration:
   "const" TYPE const_definition_list ";" { $$ = std::move($3); }

%nterm <AST::container<AST::pointer<AST::ConstDeclaration>>> const_definition_list;
const_definition_list:
   const_definition { $$ = AST::container<AST::pointer<AST::ConstDeclaration>>{}; $$.emplace_back(move($1)); }
   | const_definition_list "," const_definition {$$ = std::move($1); $$.emplace_back(move($3)); }

%nterm <AST::pointer<AST::ConstDeclaration>> const_definition;
const_definition:
   IDENT offset_list "=" init_val
   { $$ = std::make_shared<AST::ConstDeclaration>($1, std::move(*$2), move($4)); $$->range = @$; }

%nterm <AST::container<AST::pointer<AST::VariableDeclaration>>> var_declaration;
var_declaration:
   TYPE var_definition_list ";" { $$ = std::move($2); }

%nterm <AST::container<AST::pointer<AST::VariableDeclaration>>> var_definition_list;
var_definition_list:
   var_definition { $$ = AST::container<AST::pointer<AST::VariableDeclaration>>{}; $$.emplace_back(move($1)); }
   | var_definition_list "," var_definition {$$ = std::move($1); $$.emplace_back(move($3)); }

%nterm <AST::pointer<AST::VariableDeclaration>> var_definition;
var_definition:
   IDENT offset_list "=" init_val { $$ = std::make_shared<AST::VariableDeclaration>($1, std::move(*$2), move($4)); $$->range = @$; }
   | IDENT offset_list { $$ = std::make_shared<AST::VariableDeclaration>($1, std::move(*$2), std::make_shared<AST::NoneLiteral>()); $$->range = @$; }


////////////////////////////////////////////////////////////////
/// Statements /////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

%nterm <AST::pointer<AST::Block>> block;
block: 
   /* epsilon */ { $$ = std::make_shared<AST::Block>(); $$->range = @$; }
   | block statement { $$ = move($1); $$->code.emplace_back(move($2)); $$->range = @$; }
   | block declaration { $$ = move($1); std::move($2.begin(), $2.end(), std::back_inserter($$->code)); $$->range = @$; }
   | block ";" { $$ = move($1); $$->range = @$; }

%nterm <AST::pointer<AST::Statement>> statement;
statement:
   left_val "=" expr ";" { $$ = std::make_shared<AST::AssignmentStmt>(move($1), move($3)); $$->range = @$; }
   | expr ";" { $$ = std::make_shared<AST::ExpressionStmt>(move($1)); $$->range = @$; }
   | "{" block "}" { $$ = move($2); $$->range = @$; }
   | "if" "(" or_expr ")" statement "else" statement
                                    { $$ = std::make_shared<AST::IfStmt>(move($3), move($5), move($7)); $$->range = @$; }
   | "if" "(" or_expr ")" statement { $$ = std::make_shared<AST::IfStmt>(move($3), move($5)); $$->range = @$; }
   | "while" "(" or_expr ")" statement { $$ = std::make_shared<AST::WhileStmt>(move($3), move($5)); $$->range = @$; }
   | "break" ";" { $$ = std::make_shared<AST::BreakStmt>(); $$->range = @$; }
   | "continue" ";" { $$ = std::make_shared<AST::ContinueStmt>(); $$->range = @$; }
   | "return" ";" { $$ = std::make_shared<AST::ReturnStmt>(); $$->range = @$; }
   | "return" expr ";" { $$ = std::make_shared<AST::ReturnStmt>(move($2)); $$->range = @$; }

%nterm <AST::pointer<AST::PotentialLiteral>> init_val;
init_val:
   expr { $$ = move($1); }
   | "{" "}" { $$ = std::make_shared<AST::ArrayLiteral>(); $$->range = @$; }
   | "{" init_array "}" { $$ = move($2); $$->range = @$; }


%nterm <AST::pointer<AST::ArrayLiteral>> init_array;
init_array:
   init_val { $$ = std::make_shared<AST::ArrayLiteral>(); $$->data.emplace_back(move($1)); $$->range = @$; }
   | init_array "," init_val { $$ = move($1); $$->data.emplace_back(move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Identifier>> identifier;
identifier : IDENT { $$ = std::make_shared<AST::Identifier>($1); $$->range = @$; }

////////////////////////////////////////////////////////////////
/// Expressions ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

%nterm <AST::pointer<AST::Expression>> expr;
expr: add_expr { $$ = move($1); $$->range = @$; }

%nterm <AST::pointer<AST::LeftValueExpression>> left_val;
left_val: 
   identifier { $$ = move($1); $$->range = @$; }
   | left_val "[" expr "]" { $$ = std::make_shared<AST::OffsetExpression>(move($1), move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> primary_expr;
primary_expr: 
   "(" expr ")" { $$ = move($2); $$->range = @$; }
   | left_val { $$ = move($1); $$->range = @$; }
   | INT_LITERAL { $$ = std::make_shared<AST::LiteralExpression>($1); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> unary_expr;
unary_expr:
   primary_expr { $$ = move($1); $$->range = @$; }
   | identifier "(" ")" { $$ = std::make_shared<AST::CallExpression>(move($1), AST::FuncParams{}); $$->range = @$; }
   | identifier "(" func_params ")" { $$ = std::make_shared<AST::CallExpression>(move($1), std::move(*($3))); $$->range = @$; }
   | unary_op unary_expr { $$ = std::make_shared<AST::UnaryExpression>($1, move($2)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> mul_expr;
mul_expr:
   unary_expr { $$ = move($1); $$->range = @$; }
   | mul_expr "*" unary_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Mult, move($1), move($3)); $$->range = @$; }
   | mul_expr "/" unary_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Div, move($1), move($3)); $$->range = @$; }
   | mul_expr "%" unary_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Mod, move($1), move($3)); $$->range = @$; }
   
%nterm <AST::pointer<AST::Expression>> add_expr;
add_expr :
   mul_expr { $$ = move($1); $$->range = @$; }
   | add_expr "+" mul_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Plus, move($1), move($3)); $$->range = @$; }
   | add_expr "-" mul_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Minus, move($1), move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> rel_expr;
rel_expr:
   add_expr { $$ = move($1); $$->range = @$; } 
   | rel_expr "<" add_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::LT, move($1), move($3)); $$->range = @$; }
   | rel_expr ">" add_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::GT, move($1), move($3)); $$->range = @$; }
   | rel_expr "<=" add_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::LE, move($1), move($3)); $$->range = @$; }
   | rel_expr ">=" add_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::GE, move($1), move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> eq_expr;
eq_expr:
   rel_expr { $$ = move($1); $$->range = @$; } 
   | eq_expr "==" rel_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::EQ, move($1), move($3)); $$->range = @$; }
   | eq_expr "!=" rel_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::NE, move($1), move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> and_expr;
and_expr:
   eq_expr { $$ = move($1); $$->range = @$; } 
   | and_expr "&&" eq_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::And, move($1), move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::Expression>> or_expr;
or_expr:
   and_expr { $$ = move($1); $$->range = @$; } 
   | or_expr "||" and_expr { $$ = std::make_shared<AST::BinaryExpression>(BinaryOp::Or, move($1), move($3)); $$->range = @$; }

%nterm <UnaryOp> unary_op;
unary_op:
   "+" { $$ = UnaryOp::Plus; }
   | "-" { $$ = UnaryOp::Minus; }
   | "!" { $$ = UnaryOp::Not; }

////////////////////////////////////////////////////////////////
/// Utility ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

%nterm <AST::pointer<AST::FuncParams>> func_params;
func_params:
   expr { $$ = std::make_shared<AST::FuncParams>(); $$->params.emplace_back(move($1)); $$->range = @$; }
   | func_params "," expr { $$ = std::move($1); $$->params.emplace_back(move($3)); $$->range = @$; }

%nterm <AST::pointer<AST::OffsetList>> offset_list;
offset_list:
   /* epsilon */ { $$ = std::make_shared<AST::OffsetList>(); $$->range = @$; }
   | "[" "]" { $$ = std::make_shared<AST::OffsetList>(); $$->offsets.emplace_back(std::make_shared<AST::NoneLiteral>()); $$->range = @$; }
   | offset_list_body { $$ = std::move($1); $$->range = @$; }
   | "[" "]" offset_list_body { $$ = std::make_shared<AST::OffsetList>(); $$->offsets.emplace_back(std::make_shared<AST::NoneLiteral>());
      std::move($3->offsets.begin(), $3->offsets.end(), std::back_inserter($$->offsets)); $$->range = @$; }

%nterm <AST::pointer<AST::OffsetList>> offset_list_body;
offset_list_body:
   "[" expr "]" { $$ = std::make_shared<AST::OffsetList>(); $$->offsets.emplace_back(move($2)); $$->range = @$; }
   | offset_list_body "[" expr "]" { $$ = std::move($1); $$->offsets.emplace_back(move($3)); $$->range = @$; }
%%




